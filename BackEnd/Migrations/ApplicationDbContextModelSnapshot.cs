// <auto-generated />
using System;
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackEnd.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BackEnd.Models.Komentaras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Komentaras1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VertinimasId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VertinimasId");

                    b.ToTable("Komentaras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Komentaras1 = "komentaras",
                            VertinimasId = 1
                        },
                        new
                        {
                            Id = 2,
                            Komentaras1 = "komentaras",
                            VertinimasId = 2
                        },
                        new
                        {
                            Id = 3,
                            Komentaras1 = "komentaras",
                            VertinimasId = 3
                        },
                        new
                        {
                            Id = 4,
                            Komentaras1 = "komentaras",
                            VertinimasId = 4
                        },
                        new
                        {
                            Id = 5,
                            Komentaras1 = "komentaras",
                            VertinimasId = 5
                        },
                        new
                        {
                            Id = 6,
                            Komentaras1 = "komentaras",
                            VertinimasId = 6
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Naudotojas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdc4f6df-26d9-4df8-a702-996877afe433",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38a8dcde-5a9e-4c6c-b690-4c53993f1eb8",
                            Email = "writer@writer.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Writer"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "305f6ac8-d6dd-4fea-97ac-4d426f9c5537",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2444ca52-99f1-4d3d-994e-07e46b125534",
                            Email = "user2@user2.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Recenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Aprasymas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KritikoVertinimas")
                        .HasColumnType("int");

                    b.Property<string>("Pavadinimas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RasytojasId")
                        .HasColumnType("int");

                    b.Property<int>("Tipas")
                        .HasColumnType("int");

                    b.Property<int>("Zanras")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RasytojasId");

                    b.HasIndex("Tipas");

                    b.HasIndex("Zanras");

                    b.ToTable("Recenzija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aprasymas = "Aprasymas",
                            KritikoVertinimas = 5,
                            Pavadinimas = "Inception",
                            RasytojasId = 2,
                            Tipas = 1,
                            Zanras = 1
                        },
                        new
                        {
                            Id = 2,
                            Aprasymas = "Aprasfasfdasdfymas",
                            KritikoVertinimas = 8,
                            Pavadinimas = "Antras",
                            RasytojasId = 2,
                            Tipas = 2,
                            Zanras = 1
                        },
                        new
                        {
                            Id = 3,
                            Aprasymas = "Aprassadfasdfymas",
                            KritikoVertinimas = 7,
                            Pavadinimas = "Trecias",
                            RasytojasId = 2,
                            Tipas = 2,
                            Zanras = 1
                        },
                        new
                        {
                            Id = 4,
                            Aprasymas = "Aprsdfasdfasdfasymas",
                            KritikoVertinimas = 10,
                            Pavadinimas = "Ketvirtas",
                            RasytojasId = 2,
                            Tipas = 2,
                            Zanras = 1
                        },
                        new
                        {
                            Id = 5,
                            Aprasymas = "Aprassadfasdfymas",
                            KritikoVertinimas = 9,
                            Pavadinimas = "Penktas",
                            RasytojasId = 2,
                            Tipas = 2,
                            Zanras = 1
                        },
                        new
                        {
                            Id = 6,
                            Aprasymas = "Apdfasdfsadfrasymas",
                            KritikoVertinimas = 7,
                            Pavadinimas = "Haris Poteris",
                            RasytojasId = 2,
                            Tipas = 2,
                            Zanras = 1
                        },
                        new
                        {
                            Id = 7,
                            Aprasymas = "Aprassdfasdfsaymas",
                            KritikoVertinimas = 8,
                            Pavadinimas = "Fast and furiuos",
                            RasytojasId = 2,
                            Tipas = 2,
                            Zanras = 1
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BackEnd.Models.Tipas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Tipas1")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tipas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipas1 = "Knyga"
                        },
                        new
                        {
                            Id = 2,
                            Tipas1 = "Filmas"
                        },
                        new
                        {
                            Id = 3,
                            Tipas1 = "Serialas"
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Vertinimas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdNaudotojas")
                        .HasColumnType("int");

                    b.Property<int>("IdRecenzija")
                        .HasColumnType("int");

                    b.Property<int>("Vertinimas1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdNaudotojas");

                    b.HasIndex("IdRecenzija");

                    b.ToTable("Vertinimas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdNaudotojas = 3,
                            IdRecenzija = 1,
                            Vertinimas1 = 10
                        },
                        new
                        {
                            Id = 2,
                            IdNaudotojas = 3,
                            IdRecenzija = 2,
                            Vertinimas1 = 10
                        },
                        new
                        {
                            Id = 3,
                            IdNaudotojas = 3,
                            IdRecenzija = 2,
                            Vertinimas1 = 5
                        },
                        new
                        {
                            Id = 4,
                            IdNaudotojas = 4,
                            IdRecenzija = 3,
                            Vertinimas1 = 5
                        },
                        new
                        {
                            Id = 5,
                            IdNaudotojas = 4,
                            IdRecenzija = 4,
                            Vertinimas1 = 7
                        },
                        new
                        {
                            Id = 6,
                            IdNaudotojas = 4,
                            IdRecenzija = 5,
                            Vertinimas1 = 10
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Zanrai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zanrai");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Veiksmo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Animacinis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fantastinis"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nuotykių"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Siaubo"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Trileris"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Romantinis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BackEnd.Models.Komentaras", b =>
                {
                    b.HasOne("BackEnd.Models.Vertinimas", "Vertinimas")
                        .WithMany("Komentaras")
                        .HasForeignKey("VertinimasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vertinimas");
                });

            modelBuilder.Entity("BackEnd.Models.Recenzija", b =>
                {
                    b.HasOne("BackEnd.Models.Naudotojas", "RasytojasNavigation")
                        .WithMany("Recenzija")
                        .HasForeignKey("RasytojasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Tipas", "TipasNavigation")
                        .WithMany("Recenzija")
                        .HasForeignKey("Tipas")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Zanrai", "ZanrasNavigation")
                        .WithMany("Recenzija")
                        .HasForeignKey("Zanras")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RasytojasNavigation");

                    b.Navigation("TipasNavigation");

                    b.Navigation("ZanrasNavigation");
                });

            modelBuilder.Entity("BackEnd.Models.Vertinimas", b =>
                {
                    b.HasOne("BackEnd.Models.Naudotojas", "IdNaudotojasNavigation")
                        .WithMany("Vertinimas")
                        .HasForeignKey("IdNaudotojas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Recenzija", "IdRecenzijaNavigation")
                        .WithMany("Vertinimas")
                        .HasForeignKey("IdRecenzija")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdNaudotojasNavigation");

                    b.Navigation("IdRecenzijaNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BackEnd.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BackEnd.Models.Naudotojas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BackEnd.Models.Naudotojas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BackEnd.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Naudotojas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BackEnd.Models.Naudotojas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Naudotojas", b =>
                {
                    b.Navigation("Recenzija");

                    b.Navigation("Vertinimas");
                });

            modelBuilder.Entity("BackEnd.Models.Recenzija", b =>
                {
                    b.Navigation("Vertinimas");
                });

            modelBuilder.Entity("BackEnd.Models.Tipas", b =>
                {
                    b.Navigation("Recenzija");
                });

            modelBuilder.Entity("BackEnd.Models.Vertinimas", b =>
                {
                    b.Navigation("Komentaras");
                });

            modelBuilder.Entity("BackEnd.Models.Zanrai", b =>
                {
                    b.Navigation("Recenzija");
                });
#pragma warning restore 612, 618
        }
    }
}
